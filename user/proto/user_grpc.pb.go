// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteUserClient is the client API for RemoteUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteUserClient interface {
	GetUserInfo(ctx context.Context, in *RequestGetUserInfo, opts ...grpc.CallOption) (*ResponseGetUserInfo, error)
	GetUserInfoByNickname(ctx context.Context, in *RequestGetUserInfoByNickname, opts ...grpc.CallOption) (*ResponseGetUserInfoByNickname, error)
}

type remoteUserClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteUserClient(cc grpc.ClientConnInterface) RemoteUserClient {
	return &remoteUserClient{cc}
}

func (c *remoteUserClient) GetUserInfo(ctx context.Context, in *RequestGetUserInfo, opts ...grpc.CallOption) (*ResponseGetUserInfo, error) {
	out := new(ResponseGetUserInfo)
	err := c.cc.Invoke(ctx, "/proto.RemoteUser/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteUserClient) GetUserInfoByNickname(ctx context.Context, in *RequestGetUserInfoByNickname, opts ...grpc.CallOption) (*ResponseGetUserInfoByNickname, error) {
	out := new(ResponseGetUserInfoByNickname)
	err := c.cc.Invoke(ctx, "/proto.RemoteUser/GetUserInfoByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteUserServer is the server API for RemoteUser service.
// All implementations must embed UnimplementedRemoteUserServer
// for forward compatibility
type RemoteUserServer interface {
	GetUserInfo(context.Context, *RequestGetUserInfo) (*ResponseGetUserInfo, error)
	GetUserInfoByNickname(context.Context, *RequestGetUserInfoByNickname) (*ResponseGetUserInfoByNickname, error)
	mustEmbedUnimplementedRemoteUserServer()
}

// UnimplementedRemoteUserServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteUserServer struct {
}

func (UnimplementedRemoteUserServer) GetUserInfo(context.Context, *RequestGetUserInfo) (*ResponseGetUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedRemoteUserServer) GetUserInfoByNickname(context.Context, *RequestGetUserInfoByNickname) (*ResponseGetUserInfoByNickname, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByNickname not implemented")
}
func (UnimplementedRemoteUserServer) mustEmbedUnimplementedRemoteUserServer() {}

// UnsafeRemoteUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteUserServer will
// result in compilation errors.
type UnsafeRemoteUserServer interface {
	mustEmbedUnimplementedRemoteUserServer()
}

func RegisterRemoteUserServer(s grpc.ServiceRegistrar, srv RemoteUserServer) {
	s.RegisterService(&RemoteUser_ServiceDesc, srv)
}

func _RemoteUser_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteUserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RemoteUser/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteUserServer).GetUserInfo(ctx, req.(*RequestGetUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteUser_GetUserInfoByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUserInfoByNickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteUserServer).GetUserInfoByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RemoteUser/GetUserInfoByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteUserServer).GetUserInfoByNickname(ctx, req.(*RequestGetUserInfoByNickname))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteUser_ServiceDesc is the grpc.ServiceDesc for RemoteUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RemoteUser",
	HandlerType: (*RemoteUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _RemoteUser_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoByNickname",
			Handler:    _RemoteUser_GetUserInfoByNickname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
